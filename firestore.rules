rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ===================================
    // 헬퍼 함수들
    // ===================================
    
    // 사용자가 로그인되어 있는지 확인
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // 관리자 권한 확인 (안전하게 처리)
    function isAdmin() {
      return isAuthenticated() && 
        (request.auth.token.email == 'gostepexercise@gmail.com' ||
         (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'admin'));
    }
    
    // 문서 소유자 확인
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // ===================================
    // 사용자(users) 컬렉션
    // ===================================
    match /users/{userId} {
      // 읽기: 본인 또는 관리자 (삭제된 문서는 관리자만)
      allow read: if (isOwner(userId) && 
                     (!resource.data.keys().hasAny(['status']) || 
                      resource.data.status != 'deleted')) || 
                     isAdmin();
      
      // 생성: 인증된 사용자가 본인의 문서 생성 (✅ 이메일 인증 조건 제거!)
      allow create: if isAuthenticated() && request.auth.uid == userId;
      
      // 업데이트: 본인 또는 관리자 (userType은 관리자만 변경 가능)
      allow update: if (isOwner(userId) || isAdmin()) &&
        (isAdmin() || 
         !('userType' in request.resource.data) || 
         request.resource.data.userType == resource.data.userType);
      
      // 삭제: 관리자만 가능
      allow delete: if isAdmin();
    }
    
    // ===================================
    // 약관 동의(user_agreements) 컬렉션
    // ===================================
    match /user_agreements/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create, update: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if isAdmin();
    }
    
    // ===================================
    // 교육과정(courses) 컬렉션
    // ===================================
    match /courses/{courseId} {
      allow read: if true;  // 모든 사용자 접근 가능
      allow create, update, delete: if isAdmin();
    }
    
    // ===================================
    // 강사 정보(instructors) 컬렉션
    // ===================================
    match /instructors/{instructorId} {
      allow read: if true;  // 모든 사용자 접근 가능
      allow create, update, delete: if isAdmin();
    }
    
    // ===================================
    // 수강신청(enrollments) 컬렉션
    // ===================================
    match /enrollments/{enrollmentId} {
      // 읽기: 본인 또는 관리자 (삭제된 것은 관리자만)
      allow read: if isAuthenticated() && 
        ((resource.data.userId == request.auth.uid && 
          (!resource.data.keys().hasAny(['status']) || 
           resource.data.status != 'deleted')) || 
         isAdmin());
      
      // 생성: 인증된 사용자가 본인의 수강신청
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      
      // 업데이트: 본인 또는 관리자
      allow update: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      
      // 삭제: 관리자만
      allow delete: if isAdmin();
    }
    
    // ===================================
    // 자격증(certificates) 컬렉션
    // ===================================
    match /certificates/{certId} {
      // 읽기: 본인 또는 관리자 (삭제된 것은 관리자만)
      allow read: if isAuthenticated() && 
        ((resource.data.userId == request.auth.uid && 
          (!resource.data.keys().hasAny(['status']) || 
           resource.data.status != 'deleted')) || 
         isAdmin());
      
      // 생성: 관리자만
      allow create: if isAdmin();
      
      // 업데이트: 관리자만
      allow update: if isAdmin();
      
      // 삭제: 관리자만
      allow delete: if isAdmin();
    }
    
    // ===================================
    // 신청서(applications) 컬렉션
    // ===================================
    match /applications/{applicationId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow delete: if isAdmin();
    }
    
    // ===================================
    // 대기 중인 신청(pending_applications) 컬렉션
    // ===================================
    match /pending_applications/{applicationId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow delete: if isAdmin();
    }
    
    // ===================================
    // 결제 실패 로그(payment_failures) 컬렉션
    // ===================================
    match /payment_failures/{failureId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin();
    }
    
    // ===================================
    // 결제(payments) 컬렉션
    // ===================================
    match /payments/{paymentId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // ===================================
    // 시험결과(examResults) 컬렉션
    // ===================================
    match /examResults/{resultId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow create, update, delete: if isAdmin();
    }
    
    // ===================================
    // 설정(settings) 컬렉션
    // ===================================
    match /settings/{settingId} {
      allow read: if true;  // 모든 사용자 접근 가능
      allow create, update, delete: if isAdmin();
    }
    
    // ===================================
    // 게시판 - 공지사항(board_notice) 컬렉션
    // ===================================
    match /board_notice/{noticeId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    
    // ===================================
    // 게시판 - 칼럼(board_column) 컬렉션
    // ===================================
    match /board_column/{columnId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    
    // ===================================
    // 게시판 - 강의자료(board_materials) 컬렉션
    // ===================================
    match /board_materials/{materialId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    
    // ===================================
    // 게시판 - 동영상(board_videos) 컬렉션
    // ===================================
    match /board_videos/{videoId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    
    // ===================================
    // 공지사항(notices) 컬렉션
    // ===================================
    match /notices/{noticeId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    
    // ===================================
    // 칼럼(columns) 컬렉션
    // ===================================
    match /columns/{columnId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    
    // ===================================
    // 강의자료(materials) 컬렉션
    // ===================================
    match /materials/{materialId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    
    // ===================================
    // 동영상(videos) 컬렉션
    // ===================================
    match /videos/{videoId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    
    // ===================================
    // 기본 거부 규칙
    // ===================================
    match /{document=**} {
      allow read, write: if false;
    }
  }
}